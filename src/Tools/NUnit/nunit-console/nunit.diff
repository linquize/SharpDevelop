--- a/EventCollector.cs
+++ b/EventCollector.cs
@@ -7,6 +7,7 @@
 using System.IO;
 using System.Diagnostics;
 using System.Text.RegularExpressions;
+using System.Text;
 using System.Collections;
 using System.Collections.Specialized;
 using NUnit.Core;
@@ -15,9 +16,10 @@
 namespace NUnit.ConsoleRunner
 {
 	/// <summary>
-	/// Summary description for EventCollector.
+	/// Custom event listener that writes out test results as they
+	/// occur to a separate file.
 	/// </summary>
-	public class EventCollector : MarshalByRefObject, EventListener
+	public class ExtendedEventCollector : MarshalByRefObject, EventListener
 	{
 		private int testRunCount;
 		private int testIgnoreCount;
@@ -27,15 +29,17 @@ public class EventCollector : MarshalByRefObject, EventListener
 		private ConsoleOptions options;
 		private TextWriter outWriter;
 		private TextWriter errorWriter;
+		private TextWriter testResultWriter;
 
 		StringCollection messages;
 		
 		private bool progress = false;
 		private string currentTestName;
+		private bool writeResults = false;
 
 		private ArrayList unhandledExceptions = new ArrayList();
 
-		public EventCollector( ConsoleOptions options, TextWriter outWriter, TextWriter errorWriter )
+		public ExtendedEventCollector( ConsoleOptions options, TextWriter outWriter, TextWriter errorWriter, TextWriter testResultWriter)
 		{
 			level = 0;
 			this.options = options;
@@ -43,6 +47,8 @@ public EventCollector( ConsoleOptions options, TextWriter outWriter, TextWriter
 			this.errorWriter = errorWriter;
 			this.currentTestName = string.Empty;
 			this.progress = !options.xmlConsole && !options.labels && !options.nodots;
+			this.testResultWriter = testResultWriter;
+			this.writeResults = testResultWriter != null;
 
 			AppDomain.CurrentDomain.UnhandledException += 
 				new UnhandledExceptionEventHandler(OnUnhandledException);
@@ -121,6 +127,10 @@ public void TestFinished(TestResult testResult)
 			}
 
 			currentTestName = string.Empty;
+			
+			if (writeResults) {
+				WriteTestResult(testResult);
+			}
 		}
 
 		public void TestStarted(TestName testName)
@@ -217,5 +227,60 @@ public override object InitializeLifetimeService()
 		{
 			return null;
 		}
+		
+		/// <summary>
+		/// Writes a single test result to the output result file.
+		/// </summary>
+		void WriteTestResult(TestResult testResult)
+		{
+			testResultWriter.WriteLine("Name: " + testResult.FullName);
+			
+			if (testResult.IsFailure || testResult.IsError) 
+			{
+				testResultWriter.WriteLine("Message: " + EncodeText(testResult.Message));
+				testResultWriter.WriteLine("StackTrace: " + EncodeText(StackTraceFilter.Filter(testResult.StackTrace)));
+				testResultWriter.WriteLine("Result: Failure");
+			} 
+			else if (!testResult.Executed)
+			{
+				testResultWriter.WriteLine("Result: Ignored");
+			}
+			else if (testResult.IsSuccess)
+			{
+				testResultWriter.WriteLine("Result: Success");
+			} 
+		}
+
+		/// <summary>
+		/// Replaces the first character on each new line with a space.
+		/// The first line does not have the extra space added.
+		/// </summary>
+		static string EncodeText(string s)
+		{
+			if (s == null || s.Length == 0) 
+			{
+				return String.Empty;
+			}
+			
+			s = s.TrimEnd(Environment.NewLine.ToCharArray());
+			
+			StringBuilder encodedText = new StringBuilder();
+			foreach (char ch in s) 
+			{
+				switch (ch)	
+				{
+					case '\n':
+						encodedText.Append("\r\n ");
+						break;
+					case '\r':
+						// Ignore.
+						break;
+					default:
+						encodedText.Append(ch);
+						break;
+				}
+			}
+			return encodedText.ToString();
+		}			
 	}
 }
--- a/ExtendedConsoleUi.cs
+++ b/ExtendedConsoleUi.cs
@@ -1,3 +1,4 @@
+using System.IO.Pipes;
 // ****************************************************************
 // This is free software licensed under the NUnit license. You
 // may obtain a copy of the license as well as information regarding
@@ -21,7 +22,7 @@ namespace NUnit.ConsoleRunner
 	/// <summary>
 	/// Summary description for ConsoleUi.
 	/// </summary>
-	public class ConsoleUi
+	public class ExtendedConsoleUi
 	{
 		public static readonly int OK = 0;
 		public static readonly int INVALID_ARG = -1;
@@ -31,11 +32,11 @@ public class ConsoleUi
 
         private string workDir;
 
-		public ConsoleUi()
+		public ExtendedConsoleUi()
 		{
 		}
 
-		public int Execute( ConsoleOptions options )
+		public int Execute( ExtendedConsoleOptions options )
 		{
             this.workDir = options.work;
             if (workDir == null || workDir == string.Empty)
@@ -64,6 +65,15 @@ public int Execute( ConsoleOptions options )
 				errorStreamWriter.AutoFlush = true;
 				errorWriter = errorStreamWriter;
 			}
+			
+			TextWriter testResultWriter = null;
+			if ( options.UsePipe )
+			{
+				var namedPipe = new NamedPipeClientStream(".", options.pipe, PipeDirection.Out, PipeOptions.WriteThrough);
+				namedPipe.Connect();
+				testResultWriter = new StreamWriter ( namedPipe, Encoding.UTF8 );
+				((StreamWriter)testResultWriter).AutoFlush = true;
+			}
 
             TestPackage package = MakeTestPackage(options);
 
@@ -104,7 +114,7 @@ public int Execute( ConsoleOptions options )
 					return FIXTURE_NOT_FOUND;
 				}
 
-				EventCollector collector = new EventCollector( options, outWriter, errorWriter );
+				ExtendedEventCollector collector = new ExtendedEventCollector( options, outWriter, errorWriter, testResultWriter );
 
 				TestFilter testFilter;
 					
@@ -131,6 +141,9 @@ public int Execute( ConsoleOptions options )
 					if (redirectError)
 						errorWriter.Close();
 
+					if ( testResultWriter != null )
+						testResultWriter.Close();
+						
 					Environment.CurrentDirectory = savedDirectory;
 					Console.SetOut( savedOut );
 					Console.SetError( savedError );
--- a/ExtendedRunner.cs
+++ b/ExtendedRunner.cs
@@ -3,6 +3,10 @@
 // This is free software licensed under the NUnit license. You may
 // obtain a copy of the license at http://nunit.org
 // ****************************************************************
+
+// This version of NUnit-console is modified to support:
+// 1) Writing all tests results to a file as the test results are known.
+
 using System;
 using System.IO;
 using System.Reflection;
@@ -13,16 +17,17 @@
 namespace NUnit.ConsoleRunner
 {
 	/// <summary>
-	/// Summary description for Runner.
+	/// Modified version of NUnit's Runner class to support the ExtendedConsoleOptions
+	/// and the ExtendedConsoleUi class.
 	/// </summary>
-	public class Runner
+	public class ExtendedRunner
 	{
-		static Logger log = InternalTrace.GetLogger(typeof(Runner));
+		static Logger log = InternalTrace.GetLogger(typeof(ExtendedRunner));
 
 		[STAThread]
 		public static int Main(string[] args)
 		{
-			ConsoleOptions options = new ConsoleOptions(args);
+			ExtendedConsoleOptions options = new ExtendedConsoleOptions(args);
 
             // Create SettingsService early so we know the trace level right at the start
             SettingsService settingsService = new SettingsService();
@@ -90,7 +95,7 @@ public static int Main(string[] args)
 			
 			try
 			{
-				ConsoleUi consoleUi = new ConsoleUi();
+				ExtendedConsoleUi consoleUi = new ExtendedConsoleUi();
 				return consoleUi.Execute( options );
 			}
 			catch( FileNotFoundException ex )
